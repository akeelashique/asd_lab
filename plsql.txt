
SQL> set serverout on;
SQL> Declare
  2  message varchar2(20):='hello, world';
  3  begin
  4  dbms_output.put_line(message);
  5  end;
  6  /
hello, world

PL/SQL procedure successfully completed.


SQL> set serverout on;
SQL> declare
  2  v char(2):='A';
  3  begin
  4  if (v='A') then
  5  dbms_output.put_line('Excellent');
  6  elsif (v='B') then
  7  dbms_output.put_line('Good');
  8  elsif (v='C') then
  9  dbms_output.put_line('Poor');
 10  else
 11  dbms_output.put_line('Fail');
 12  end if;
 13  end;
 14  /
Excellent

SQL> declare
  2  type subject is varray(5) of number;
  3  sub1 subject;
  4  sub2 subject;
  5  i number;
  6  begin
  7  sub1:=subject(10,20,30,40,50);
  8  sub2:=subject(10,20,30,40,50);
  9  for i in 1..5 loop
 10  dbms_output.put_line(sub1(i)+sub2(i));
 11  end loop;
 12  end;
 13  /
20
40
60
80
100

PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

SQL> set serverout on;
SQL> declare
  2  num number:=5;
  3  fact number:=1;
  4  temp number;
  5  begin
  6  temp:=num;
  7  while (num>0)
  8  loop
  9  fact:= fact * num;
 10  num :=num -1;
 11  end loop;
 12  dbms_output.put_line(fact);
 13  end;
 14  /
     120

PL/SQL procedure successfully completed.


SQL> declare
  2  a number:=3;
  3  i number:=1;
  4  begin
  5  loop
  6  dbms_output.put_line(a*i);
  7  i:=i+1;
  8  exit when i>10;
  9  end loop;
 10  end;
 11  /
3
6
9
12
15
18
21
24
27
30



SQL> declare
  2  type num is varray(5) of number(6);
  3  numb num;
  4  begin
  5  numb := num(33,22,55,77,66);
  6  for i in 1..numb.count loop
  7  if mod(numb(i),2)=0 then
  8  insert into oe(even) values(numb(i));
  9  else
 10  insert into oe(odd) values(numb(i));
 11  end if;
 12  end loop;
 13  end;
 14  /

PL/SQL procedure successfully completed.

SQL> select * from oe;

      EVEN        ODD
---------- ----------
                   33
        22
                   55
                   77
        66


SQL> declare
  2  numb number:=10;
  3  begin
  4  for i in 1..numb loop
  5  insert into sc(square) values(power(i,2));
  6  insert into sc(cube) values(power(i,3));
  7  end loop;
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> select * from sc;

    SQUARE       CUBE
---------- ----------
         1
                    1
         4
                    8
         9
                   27
        16
                   64
        25
                  125
        36

    SQUARE       CUBE
---------- ----------
                  216
        49
                  343
        64
                  512
        81
                  729
       100
                 1000

20 rows selected.


SQL> begin
  2  update emp set emi=emi/2 where cid=&n;
  3  if(sql%notfound) then
  4  dbms_output.put_line('id not found');
  5  end if;
  6  end;
  7  /
Enter value for n: 1
old   2: update emp set emi=emi/2 where cid=&n;
new   2: update emp set emi=emi/2 where cid=1;

PL/SQL procedure successfully completed.

SQL> select * from emp;

       CID        EMI
---------- ----------
         1       5000
         2      20000
         3      30000


SQL> declare
  2  a number;
  3  b number;
  4  c number;
  5  procedure findmin(x in number,y in number,z out number) is
  6  begin
  7  if x<y then
  8  z:=x;
  9  else
 10  z:=y;
 11  end if;
 12  end;
 13  begin
 14  findmin(&a,&b,c);
 15  dbms_output.put_line('min : '||c);
 16  end;
 17  /
Enter value for a: 5
Enter value for b: 4
old  14: findmin(&a,&b,c);
new  14: findmin(5,4,c);
min : 4

PL/SQL procedure successfully completed.


SQL> declare
  2  a number;
  3  procedure toDec(b in number) as
  4  i number:=0;
  5  dec number:=0;
  6  x number:=b;
  7  begin
  8  while(x>0) loop
  9  dec:=dec+mod(x,10)*power(2,i);
 10  i:=i+1;
 11  x:=floor(x/10);
 12  end loop;
 13  dbms_output.put_line(dec);
 14  end;
 15  begin
 16  toDec(&a);
 17  end;
 18  /
Enter value for a: 100
old  16: toDec(&a);
new  16: toDec(100);
4

PL/SQL procedure successfully completed.


SQL> create or replace procedure quad(a in number,b in number,c in number) as
  2  d number;
  3  begin
  4  d:=b*b-4*a*c;
  5  if (d>=0) then
  6  dbms_output.put_line('root 1 : '|| (-b+sqrt(d))/2*a);
  7  dbms_output.put_line('root 2 : '|| (-b-sqrt(d))/2*a);
  8  else
  9  dbms_output.put_line('root 1 : '|| (-b/2*a) ||' +i '|| round(sqrt(abs(d)),2
));
 10  dbms_output.put_line('root 2 : '|| (-b/2*a) ||' -i '|| round(sqrt(abs(d)),2
));
 11  end if;
 12  end;
 13  /

Procedure created.

SQL> execute quad(1,2,3);
root 1 : -1 +i 2.83
root 2 : -1 -i 2.83

PL/SQL procedure successfully completed.

create or replace procedure incr(cid in number) is
begin
update instructor set salary=salary*1.2 where cid=id;
if (sql%notfound) then
dbms_output.put_line('id not found');
end if;
end;
/

create or replace procedure del (id in number) is
begin
delete from emp where cid=id;
if (sql%notfound) then
dbms_output.put_line('id not found');
end if;
end;
/

SQL> create or replace function fact(x in pls_integer) return pls_integer as
  2  num pls_integer := x;
  3  temp pls_integer;
  4  fact pls_integer :=1;
  5  begin
  6  temp := num;
  7  while(num>0) loop
  8  fact := fact * num;
  9  num := num -1;
 10  end loop;
 11  return fact;
 12  end;
 13  /

Function created.

SQL> set serverout on;
SQL> declare
  2  a pls_integer:=&a;
  3  begin
  4  dbms_output.put_line(fact(a));
  5  end;
  6  /
Enter value for a: 5
old   2: a pls_integer:=&a;
new   2: a pls_integer:=5;
120

PL/SQL procedure successfully completed.


SQL> create or replace function reverse(x in number) return number as
  2  temp number:=x;
  3  rev number:=0;
  4  begin
  5  while(temp>0) loop
  6  rev:=rev*10 + mod(temp,10);
  7  temp:=floor(temp/10);
  8  end loop;
  9  dbms_output.put_line(rev);
 10  return rev;
 11  end;
 12  /

Function created.

SQL> declare
  2  x number:=&x;
  3  rev number;
  4  begin
  5  rev:=reverse(x);
  6  if(rev=x) then
  7  dbms_output.put_line('palindrome');
  8  else
  9  dbms_output.put_line('not palindrome');
 10  end if;
 11  end;
 12  /
Enter value for x: 123
old   2: x number:=&x;
new   2: x number:=123;
321
not palindrome

PL/SQL procedure successfully completed.


SQL> create or replace function arm(x in number) return number as
  2  temp1 number := x;
  3  temp2 number := x;
  4  n number := 0;
  5  s number := 0;
  6  r number;
  7  begin
  8  while (temp1>0) loop
  9  n := n+1;
 10  temp1 := floor(temp1/10);
 11  end loop;
 12  while (temp2>0) loop
 13  r := mod(temp2,10);
 14  s := s+power(r,n);
 15  temp2 := floor(temp2/10);
 16  end loop;
 17  return s;
 18  end;
 19  /

Function created.

SQL> declare
  2  x number:= &x;
  3  begin
  4  if(x = arm(x)) then
  5  dbms_output.put_line('armstrong');
  6  else
  7  dbms_output.put_line('not armstrong');
  8  end if;
  9  end;
 10  /
Enter value for x: 123
old   2: x number:= &x;
new   2: x number:= 123;
not armstrong

PL/SQL procedure successfully completed.

SQL> create or replace function num(n in number) return number as
  2  s number:=0;
  3  begin
  4  for i in 1..n loop
  5  s:=s+i;
  6  end loop;
  7  return s;
  8  end;
  9  /

Function created.

SQL> declare
  2  a number:=&a;
  3  begin
  4  insert into sum values(a,num(a));
  5  end;
  6  /
Enter value for a: 10
old   2: a number:=&a;
new   2: a number:=10;

PL/SQL procedure successfully completed.

SQL> select * from sum;

       NUM        SUM
---------- ----------
        10         55

create table  roots(num int,sqrt number,cube_root number);
	Table created.

create or replace function rt(m in number) return number as
	x number := m;
	begin
		insert into roots values(x,sqrt(x),power(x,1/3));
		return 1;
	end;
/
declare 
	x number := &x;
	res number;
begin	
	res := rt(x);
end;
/
PL/SQL procedure successfully completed.

SQL> select * from roots;

       NUM       SQRT  CUBE_ROOT
---------- ---------- ----------
         3 1.73205081 1.44224957
